=begin
#Svea Checkout API

#Svea Checkout API

OpenAPI spec version: v1
Contact: support-webpay@sveaekonomi.se
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'uri'

module SveaCheckout
  class OrdersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # This request creates a new order and returns the checkout to the webshop.    You can add preset values to the call, as well. These values will prefill the identification in the checkout. If a preset value has IsReadOnly, the customer will not be able to modify the value.    @@include(\"minor-currency.md\")
    # HTTP status code 201 indicates success, everything else indicates a failure.
    # @param cmd Object as JSON containing MerchantSettings and Cart-information.
    # @param [Hash] opts the optional parameters
    # @return [Data]
    def orders_create_order(cmd, opts = {})
      data, _status_code, _headers = orders_create_order_with_http_info(cmd, opts)
      data
    end

    # This request creates a new order and returns the checkout to the webshop.    You can add preset values to the call, as well. These values will prefill the identification in the checkout. If a preset value has IsReadOnly, the customer will not be able to modify the value.    @@include(\&quot;minor-currency.md\&quot;)
    # HTTP status code 201 indicates success, everything else indicates a failure.
    # @param cmd Object as JSON containing MerchantSettings and Cart-information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Data, Fixnum, Hash)>] Data data, response status code and response headers
    def orders_create_order_with_http_info(cmd, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.orders_create_order ...'
      end
      # verify the required parameter 'cmd' is set
      if @api_client.config.client_side_validation && cmd.nil?
        fail ArgumentError, "Missing the required parameter 'cmd' when calling OrdersApi.orders_create_order"
      end
      # resource path
      local_var_path = '/api/orders'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(cmd)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Data')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#orders_create_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This request returns a data structure that contains all information about the order and what is needed for the GUI.
    # HTTP status code 200 indicates success, everything else indicates a failure.
    # @param id Checkoutorderid of the specified order.
    # @param [Hash] opts the optional parameters
    # @return [Data]
    def orders_get_order(id, opts = {})
      data, _status_code, _headers = orders_get_order_with_http_info(id, opts)
      data
    end

    # This request returns a data structure that contains all information about the order and what is needed for the GUI.
    # HTTP status code 200 indicates success, everything else indicates a failure.
    # @param id Checkoutorderid of the specified order.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Data, Fixnum, Hash)>] Data data, response status code and response headers
    def orders_get_order_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.orders_get_order ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrdersApi.orders_get_order"
      end
      # resource path
      local_var_path = '/api/orders/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Data')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#orders_get_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This request replaces the order rows of the specified order with the new appended in the call and sets the MerchantData on the order to the provided value.         ///   @@include(\"minor-currency.md\")
    # HTTP status code 200 indicates success, everything else indicates a failure.
    # @param id Checkoutorderid of the specified order.
    # @param data Contains the order rows that will be set to the specified order, as well as MerchantData.
    # @param [Hash] opts the optional parameters
    # @return [Data]
    def orders_update_order_post(id, data, opts = {})
      data, _status_code, _headers = orders_update_order_post_with_http_info(id, data, opts)
      data
    end

    # This request replaces the order rows of the specified order with the new appended in the call and sets the MerchantData on the order to the provided value.         ///   @@include(\&quot;minor-currency.md\&quot;)
    # HTTP status code 200 indicates success, everything else indicates a failure.
    # @param id Checkoutorderid of the specified order.
    # @param data Contains the order rows that will be set to the specified order, as well as MerchantData.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Data, Fixnum, Hash)>] Data data, response status code and response headers
    def orders_update_order_post_with_http_info(id, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.orders_update_order_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrdersApi.orders_update_order_post"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling OrdersApi.orders_update_order_post"
      end
      # resource path
      local_var_path = '/api/orders/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(data)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Data')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#orders_update_order_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This request replaces the order rows of the specified order with the new appended in the call and sets the MerchantData on the order to the provided value.   @@include(\"minor-currency.md\")
    # HTTP status code 200 indicates success, everything else indicates a failure.
    # @param id Checkoutorderid of the specified order.
    # @param data Contains the order rows that will be set to the specified order, as well as MerchantData.
    # @param [Hash] opts the optional parameters
    # @return [Data]
    def orders_update_order_put(id, data, opts = {})
      data, _status_code, _headers = orders_update_order_put_with_http_info(id, data, opts)
      data
    end

    # This request replaces the order rows of the specified order with the new appended in the call and sets the MerchantData on the order to the provided value.   @@include(\&quot;minor-currency.md\&quot;)
    # HTTP status code 200 indicates success, everything else indicates a failure.
    # @param id Checkoutorderid of the specified order.
    # @param data Contains the order rows that will be set to the specified order, as well as MerchantData.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Data, Fixnum, Hash)>] Data data, response status code and response headers
    def orders_update_order_put_with_http_info(id, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.orders_update_order_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrdersApi.orders_update_order_put"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling OrdersApi.orders_update_order_put"
      end
      # resource path
      local_var_path = '/api/orders/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(data)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Data')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#orders_update_order_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
