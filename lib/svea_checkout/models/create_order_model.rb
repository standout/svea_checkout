=begin
#Svea Checkout API

#Svea Checkout API

OpenAPI spec version: v1
Contact: support-webpay@sveaekonomi.se
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'date'

module SveaCheckout
  class CreateOrderModel
    attr_accessor :country_code

    attr_accessor :currency

    # Locale for the order
    attr_accessor :locale

    # A string that identifies the order in the merchantâ€™s systems.   The ClientOrderNumber is unique per order. Attempting to create a new order with a previously used  ClientOrderNumber will result in the create method returning the already existing order instead.
    attr_accessor :client_order_number

    attr_accessor :merchant_settings

    attr_accessor :cart

    attr_accessor :preset_values

    attr_accessor :identity_flags

    attr_accessor :require_electronic_id_authentication

    # Provided by Svea to select partners.
    attr_accessor :partner_key

    # Metadata visible to the store
    attr_accessor :merchant_data

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'country_code' => :'countryCode',
        :'currency' => :'currency',
        :'locale' => :'locale',
        :'client_order_number' => :'clientOrderNumber',
        :'merchant_settings' => :'merchantSettings',
        :'cart' => :'cart',
        :'preset_values' => :'presetValues',
        :'identity_flags' => :'identityFlags',
        :'require_electronic_id_authentication' => :'requireElectronicIdAuthentication',
        :'partner_key' => :'partnerKey',
        :'merchant_data' => :'merchantData'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'country_code' => :'String',
        :'currency' => :'String',
        :'locale' => :'String',
        :'client_order_number' => :'String',
        :'merchant_settings' => :'MerchantSettings',
        :'cart' => :'Cart',
        :'preset_values' => :'Array<PresetValue>',
        :'identity_flags' => :'IdentityFlags',
        :'require_electronic_id_authentication' => :'BOOLEAN',
        :'partner_key' => :'String',
        :'merchant_data' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'countryCode')
        self.country_code = attributes[:'countryCode']
      end

      if attributes.has_key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.has_key?(:'locale')
        self.locale = attributes[:'locale']
      end

      if attributes.has_key?(:'clientOrderNumber')
        self.client_order_number = attributes[:'clientOrderNumber']
      end

      if attributes.has_key?(:'merchantSettings')
        self.merchant_settings = attributes[:'merchantSettings']
      end

      if attributes.has_key?(:'cart')
        self.cart = attributes[:'cart']
      end

      if attributes.has_key?(:'presetValues')
        if (value = attributes[:'presetValues']).is_a?(Array)
          self.preset_values = value
        end
      end

      if attributes.has_key?(:'identityFlags')
        self.identity_flags = attributes[:'identityFlags']
      end

      if attributes.has_key?(:'requireElectronicIdAuthentication')
        self.require_electronic_id_authentication = attributes[:'requireElectronicIdAuthentication']
      end

      if attributes.has_key?(:'partnerKey')
        self.partner_key = attributes[:'partnerKey']
      end

      if attributes.has_key?(:'merchantData')
        self.merchant_data = attributes[:'merchantData']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          country_code == o.country_code &&
          currency == o.currency &&
          locale == o.locale &&
          client_order_number == o.client_order_number &&
          merchant_settings == o.merchant_settings &&
          cart == o.cart &&
          preset_values == o.preset_values &&
          identity_flags == o.identity_flags &&
          require_electronic_id_authentication == o.require_electronic_id_authentication &&
          partner_key == o.partner_key &&
          merchant_data == o.merchant_data
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [country_code, currency, locale, client_order_number, merchant_settings, cart, preset_values, identity_flags, require_electronic_id_authentication, partner_key, merchant_data].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SveaCheckout.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
