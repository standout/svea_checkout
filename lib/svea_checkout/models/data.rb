=begin
#Svea Checkout API

#Svea Checkout API

OpenAPI spec version: v1
Contact: support-webpay@sveaekonomi.se
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'date'

module SveaCheckout
  class Data
    # Specific merchant URIs
    attr_accessor :merchant_settings

    # Order rows.
    attr_accessor :cart

    # Identified customer of the order.
    attr_accessor :customer

    # Shipping address of identified customer.
    attr_accessor :shipping_address

    # Billing address of identified customer.
    attr_accessor :billing_address

    # 
    attr_accessor :gui

    # The current locale of the checkout, i.e.sv-SE etc.
    attr_accessor :locale

    # The current currency as defined by ISO 4217, i.e. SEK, NOK etc.
    attr_accessor :currency

    # Defined by two-letter ISO 3166-1 alpha-2, i.e. SE, DE, FI etc.
    attr_accessor :country_code

    attr_accessor :client_order_number

    attr_accessor :order_id

    attr_accessor :email_address

    # The customer’s phone number
    attr_accessor :phone_number

    # The final payment method for the order. Will only have a value when the order is finalized, otherwise null.  <ul><li>INVOICE</li><li>ADMININVOICE</li><li>ACCOUNT</li><li>PAYMENTPLAN</li><li>SVEACARDPAY</li><li>SVEACARDPAY_PF</li><li>Or one of the following direct bank types. (For the most recent list of available banks check the Payment Gateway documentation.)  <ul><li>BANKAXESS (BankAxess, Norway)</li><li>DBAKTIAFI (Aktia, Finland)</li><li>DBALANDSBANKENFI (Ålandsbanken, Finland)</li><li>DBDANSKEBANKSE (Danske bank, Sweden)</li><li>DBNORDEAFI (Nordea, Finland)</li><li>DBNORDEASE (Nordea, Sweden)</li><li>DBPOHJOLAFI (OP-Pohjola, Finland)</li><li>DBSAMPOFI (Sampo, Finland)</li><li>DBSEBSE (SEB, Individuals, Sweden)</li><li>DBSEBFTGSE (SEB, companies, Sweden)</li><li>DBSHBSE (Handelsbanken, Sweden)</li><li>DBSPANKKIFI (S-Pankki, Finland)</li><li>DBSWEDBANKSE (Swedbank, Sweden)</li><li>DBTAPIOLAFI (Tapiola, Finland)</li></ul></li></ul>
    attr_accessor :payment_type

    # The final payment method for the order. Will only have a value when the order is finalized, otherwise null.
    attr_accessor :payment

    # The current state of the order
    attr_accessor :status

    # B2B Customer reference
    attr_accessor :customer_reference

    # True = Svea will buy this invoice. False = Svea will not buy this invoice. null = Selected payment method is not Invoice.
    attr_accessor :svea_will_buy_order

    attr_accessor :identity_flags

    # Metadata visible to the store
    attr_accessor :merchant_data

    # A company’s ID in the PEPPOL network, which allows the company to receive PEPPOL invoices. A PEPPOL ID can be entered when placing a B2B order using the payment method invoice.
    attr_accessor :peppol_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'merchant_settings' => :'MerchantSettings',
        :'cart' => :'Cart',
        :'customer' => :'Customer',
        :'shipping_address' => :'ShippingAddress',
        :'billing_address' => :'BillingAddress',
        :'gui' => :'Gui',
        :'locale' => :'Locale',
        :'currency' => :'Currency',
        :'country_code' => :'CountryCode',
        :'client_order_number' => :'ClientOrderNumber',
        :'order_id' => :'OrderId',
        :'email_address' => :'EmailAddress',
        :'phone_number' => :'PhoneNumber',
        :'payment_type' => :'PaymentType',
        :'payment' => :'Payment',
        :'status' => :'Status',
        :'customer_reference' => :'CustomerReference',
        :'svea_will_buy_order' => :'SveaWillBuyOrder',
        :'identity_flags' => :'IdentityFlags',
        :'merchant_data' => :'MerchantData',
        :'peppol_id' => :'PeppolId'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'merchant_settings' => :'MerchantSettings',
        :'cart' => :'Cart',
        :'customer' => :'Customer',
        :'shipping_address' => :'Address',
        :'billing_address' => :'Address',
        :'gui' => :'Gui',
        :'locale' => :'String',
        :'currency' => :'String',
        :'country_code' => :'String',
        :'client_order_number' => :'String',
        :'order_id' => :'Integer',
        :'email_address' => :'String',
        :'phone_number' => :'String',
        :'payment_type' => :'String',
        :'payment' => :'PaymentInfo',
        :'status' => :'Integer',
        :'customer_reference' => :'String',
        :'svea_will_buy_order' => :'BOOLEAN',
        :'identity_flags' => :'IdentityFlags',
        :'merchant_data' => :'String',
        :'peppol_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'MerchantSettings')
        self.merchant_settings = attributes[:'MerchantSettings']
      end

      if attributes.has_key?(:'Cart')
        self.cart = attributes[:'Cart']
      end

      if attributes.has_key?(:'Customer')
        self.customer = attributes[:'Customer']
      end

      if attributes.has_key?(:'ShippingAddress')
        self.shipping_address = attributes[:'ShippingAddress']
      end

      if attributes.has_key?(:'BillingAddress')
        self.billing_address = attributes[:'BillingAddress']
      end

      if attributes.has_key?(:'Gui')
        self.gui = attributes[:'Gui']
      end

      if attributes.has_key?(:'Locale')
        self.locale = attributes[:'Locale']
      end

      if attributes.has_key?(:'Currency')
        self.currency = attributes[:'Currency']
      end

      if attributes.has_key?(:'CountryCode')
        self.country_code = attributes[:'CountryCode']
      end

      if attributes.has_key?(:'ClientOrderNumber')
        self.client_order_number = attributes[:'ClientOrderNumber']
      end

      if attributes.has_key?(:'OrderId')
        self.order_id = attributes[:'OrderId']
      end

      if attributes.has_key?(:'EmailAddress')
        self.email_address = attributes[:'EmailAddress']
      end

      if attributes.has_key?(:'PhoneNumber')
        self.phone_number = attributes[:'PhoneNumber']
      end

      if attributes.has_key?(:'PaymentType')
        self.payment_type = attributes[:'PaymentType']
      end

      if attributes.has_key?(:'Payment')
        self.payment = attributes[:'Payment']
      end

      if attributes.has_key?(:'Status')
        self.status = attributes[:'Status']
      end

      if attributes.has_key?(:'CustomerReference')
        self.customer_reference = attributes[:'CustomerReference']
      end

      if attributes.has_key?(:'SveaWillBuyOrder')
        self.svea_will_buy_order = attributes[:'SveaWillBuyOrder']
      end

      if attributes.has_key?(:'IdentityFlags')
        self.identity_flags = attributes[:'IdentityFlags']
      end

      if attributes.has_key?(:'MerchantData')
        self.merchant_data = attributes[:'MerchantData']
      end

      if attributes.has_key?(:'PeppolId')
        self.peppol_id = attributes[:'PeppolId']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @merchant_settings.nil?
        invalid_properties.push('invalid value for "merchant_settings", merchant_settings cannot be nil.')
      end

      if @locale.nil?
        invalid_properties.push('invalid value for "locale", locale cannot be nil.')
      end

      if @currency.nil?
        invalid_properties.push('invalid value for "currency", currency cannot be nil.')
      end

      if @client_order_number.nil?
        invalid_properties.push('invalid value for "client_order_number", client_order_number cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @merchant_settings.nil?
      return false if @locale.nil?
      return false if @currency.nil?
      return false if @client_order_number.nil?
      status_validator = EnumAttributeValidator.new('Integer', ['0', '10', '15', '20', '100', '-1'])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('Integer', ['0', '10', '15', '20', '100', '-1'])
      unless validator.valid?(status)
        fail ArgumentError, 'invalid value for "status", must be one of #{validator.allowable_values}.'
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          merchant_settings == o.merchant_settings &&
          cart == o.cart &&
          customer == o.customer &&
          shipping_address == o.shipping_address &&
          billing_address == o.billing_address &&
          gui == o.gui &&
          locale == o.locale &&
          currency == o.currency &&
          country_code == o.country_code &&
          client_order_number == o.client_order_number &&
          order_id == o.order_id &&
          email_address == o.email_address &&
          phone_number == o.phone_number &&
          payment_type == o.payment_type &&
          payment == o.payment &&
          status == o.status &&
          customer_reference == o.customer_reference &&
          svea_will_buy_order == o.svea_will_buy_order &&
          identity_flags == o.identity_flags &&
          merchant_data == o.merchant_data &&
          peppol_id == o.peppol_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [merchant_settings, cart, customer, shipping_address, billing_address, gui, locale, currency, country_code, client_order_number, order_id, email_address, phone_number, payment_type, payment, status, customer_reference, svea_will_buy_order, identity_flags, merchant_data, peppol_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SveaCheckout.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
